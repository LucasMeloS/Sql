 -----------------------------------------------------------------------------------------------

--Fazer o union all de duas tabelas, fazer a contagem dos repetidos, e selecionar os repetiddos entre 30 e 40

select sub.Idf_Empregado, count(*) as rep 
from (
		select Idf_Empregado from TAB_Empregado
		union all
		select Idf_Empregado from TAB_Salario
		) as sub
where Idf_Empregado between 3900 and 3910
group by Idf_Empregado
having count(*) between 30 and 40

 -----------------------------------------------------------------------------------------------

 -- fazendo join de uma tabela com a outra e usamos algumas especificacoes como filtro de busca 

SELECT Idf_Salario as ID, Sig_Moeda as Moeda, Num_Matricula as NumeroMatricula, 
Dta_Fim_Vigencia as DataFimVigencia, Vlr_Salario as ValorSalario
FROM TAB_SALARIO s
JOIN TAB_Empregado e ON s.Idf_Empregado = e.Idf_Empregado
where Num_Matricula between 50 and 53
and Num_Matricula not between 51 and 52
and Dta_Fim_Vigencia is null 
and Idf_Salario between 20000 and 24000
--group by Idf_Salario
ORDER BY ID

 -----------------------------------------------------------------------------------------------

-- descobrir todos os contratos da matricula 86

select * --TAB_Empregado.Idf_Empregado, TAB_Empregado.Num_Matricula, TAB_Empregado_Contrato.Idf_Contrato, TAB_Empregado_Contrato.Dta_Cadastro, TAB_Salario.Vlr_Salario
from TAB_Empregado
join tab_Empregado_Contrato on TAB_Empregado.Idf_Empregado = tab_empregado_Contrato.Idf_Empregado
join TAB_Salario on TAB_Empregado.Idf_Empregado = TAB_Salario.Idf_Empregado
where Num_Matricula = 86;

 -----------------------------------------------------------------------------------------------

 -- descobrir todos os contratos da matricula 86

select *--TAB_Empregado.Idf_Empregado, TAB_Empregado.Num_Matricula, TAB_Empregado_Contrato.Idf_Contrato, TAB_Empregado_Contrato.Dta_Cadastro, TAB_Salario.Vlr_Salario
from TAB_Empregado
left join tab_Empregado_Contrato on tab_empregado_Contrato.Idf_Empregado = TAB_Empregado.Idf_Empregado 
left join TAB_Salario on TAB_Salario.Idf_Empregado = TAB_Empregado.Idf_Empregado
where Num_Matricula = 86; 

 -----------------------------------------------------------------------------------------------

-- fazendo um begin tran, caso seja uma table muito grande ou muito importante 

select * from TAB_Salario
WHERE Idf_Salario = 12796;

--begin tran 
UPDATE TAB_Salario
SET Vlr_Salario = 0.15
WHERE Idf_Salario = 12796;
--commit
--rollback

delete from TAB_Salario
WHERE Idf_Salario = 12796;

 -----------------------------------------------------------------------------------------------

-- DESCOBRIR O RELACIONAMENTO DAS TABELAS 

Sp_HELP 'TAB_Empregado'

------------------------------------------------------------------------------------------------

--Selecionar por empregado todos os holerites do tipo folha 1,5, que estejam no mesmo periodo de calculo,
--com o vlr_holrite igualApenas holerites com periodo calculo entre 201701 - 201804

select  idf_empregado, idf_periodo_calculo, Vlr_Holerite,count(*) as Duplicados 
from TAB_Holerite
where Idf_Periodo_Calculo between 201701 and 201804
and Idf_Tipo_Folha = 1 or Idf_Tipo_Folha = 5
group by idf_empregado,idf_periodo_calculo,Vlr_Holerite
having count(*) > 1 

------------------------------------------------------------------------------------------------

--Media dos holerites entre o periodo de calculo 201701 e 2018014 

select idf_FILIAL, AVG(Vlr_Holerite) as media
from TAB_Holerite
where Idf_Periodo_calculo between 201701 and 201804
--and Idf_Tipo_Folha = 1 or Idf_Tipo_Folha = 5 
group by idf_FILIAL

----------------------------------------------------------------------------------------------------------------

--Alterando numero comercial 

Update TAB_Filial
set Num_Comercial= 33333333
where raz_social like '%nes%bebi%alim%'
and Num_Comercial is not null

-----------------------------------------------------------------------------------------------------------------

--Select para ver se realmente alterou o numero

select * from TAB_Filial
where raz_social like '%nes%bebi%alim%'
and Num_Comercial = 33333333

 ---------------------------------------------------------------------------------------------------------------

 SELECT * from TAB_Filial
 WHERE raz_social like '%nes%bebi%alim%'
 AND Num_Comercial = 33333333

 --------------------------------------------------------------------------------------------------------------

-- Quando feita a alteração da razao social da nestle, que se encontra no num_cnpj citado, o trigger rodará

CREATE TRIGGER TGR_TAB_Filial
ON TAB_Filial
FOR INSERT, UPDATE
AS
BEGIN
   
	DECLARE @nome VARCHAR(200)
	--SET @nome = ' Rh '
    
    SELECT @nome = raz_social FROM INSERTED

    UPDATE TAB_FILIAL SET raz_social = 'Employer'
	WHERE Num_CNPJ = 33062464000181
	
END
GO

-----------------------------------------------------------------------------------------------------------

--Exists usado para testar a existencia de outra subquery

SELECT Nme_Empresa
FROM Tab_Holerite
WHERE EXISTS (SELECT Num_Matricula FROM TAB_Empregado WHERE Idf_holerite = tab_holerite.Idf_holerite AND Idf_Tipo_Folha < 4);

-----------------------------------------------------------------------------------------------------------

ex curso sql

--inserindo registros

INSERT INTO religiao (Religiao, Nme_Religiao)
VALUES (1, 'cristao');

INSERT INTO religiao (Religiao, Nme_Religiao)
VALUES (2, 'catolico');

INSERT INTO raca (Raca, Nme_Raca)
VALUES (1, 'branco');

INSERT INTO raca (Raca, Nme_Raca)
VALUES (1, 'amarelo');

INSERT INTO nacionalidade ( Nacionalidade , Nme_Nacionalidade)
VALUES (1, 'brasileiro');

INSERT INTO nacionalidade ( Nacionalidade , Nme_Nacionalidade)
VALUES (2, 'americano');

INSERT INTO sexo ( Sexo , Des_Sexo )
VALUES (1, 'masculino');

INSERT INTO sexo ( Sexo , Des_Sexo)
VALUES (2, 'feminino');

INSERT INTO pessoa ( Nome, CPF,Altura,Peso,Email,Religiao,Raca,Nacionalidade,Sexo,DtaNascimento)
VALUES ('godofredo', 12011005090, NULL, NULL, NULL, 1, 1, 1, 1, '2000-05-22 00:00:00')

INSERT INTO pessoa ( Nome, CPF,Altura,Peso,Email,Religiao,Raca,Nacionalidade,Sexo,DtaNascimento)
VALUES ('alfredo', 11011005050, NULL, NULL, NULL, 1, 1, 1, 1, '2000-04-23 00:00:00')

INSERT INTO pessoa ( Nome, CPF,Altura,Peso,Email,Religiao,Raca,Nacionalidade,Sexo,DtaNascimento)
VALUES ('frederico', 12012005050, NULL, NULL, NULL, 2, 2, 1, 1, '2000-04-20 00:00:00')

INSERT INTO pessoa ( Nome, CPF,Altura,Peso,Email,Religiao,Raca,Nacionalidade,Sexo,DtaNascimento)
VALUES ('fred', 10011005050, NULL, NULL, NULL, 2, 1, 1, 1, '2000-04-02 00:00:00')

INSERT INTO pessoa ( Nome, CPF,Altura,Peso,Email,Religiao,Raca,Nacionalidade,Sexo,DtaNascimento)
VALUES ('alfreda', 11011036050, NULL, NULL, NULL, 1, 2, 1, 2, '2000-10-24 00:00:00')

-- mostrando o nome e a data de nascimento das pessoas que nasceram no mes de abril do ano 2000

SELECT nome, CONVERT(DATE,p.DtaNascimento)
FROM Pessoa p
WHERE DtaNascimento BETWEEN '2000-04-01' AND '2000-04-31'

